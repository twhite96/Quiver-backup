{
  "title": "Ruby Interview Questions",
  "cells": [
    {
      "type": "text",
      "data": "<div><h1 style=\"box-sizing: border-box; font-size: 2.25em; margin-right: 0px; margin-bottom: 16px; margin-left: 0px; line-height: 1.2; position: relative; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; background-color: rgb(255, 255, 255); margin-top: 0px !important;\">Ruby Interview Questions</h1><h5 style=\"box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.4; font-size: 1em; position: relative; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; background-color: rgb(255, 255, 255);\"><a name=\"user-content-what-are-blocks-for\" class=\"anchor\" href=\"https://gist.github.com/karimmtarek/2a60a5d6bfe005c991a1#what-are-blocks-for\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none; position: absolute; top: 0px; bottom: 0px; left: 0px; display: block; padding-right: 6px; padding-left: 30px; margin-left: -30px;\"></a>What are blocks for?</h5><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25px; background-color: rgb(255, 255, 255);\">Plain old english: Ways of grouping code we want to run. The simplest explanation for a block is that it is a chunk of code between&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px;\">{}</code>&nbsp;or&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px;\">do...end</code>, that can't be stored in a variable and isn't an object. A block is just part of the&nbsp;<em style=\"box-sizing: border-box;\">syntax</em>&nbsp;of a method call. It doesn’t mean anything on a standalone basis and can only appear in argument lists.</p><h5 style=\"box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.4; font-size: 1em; position: relative; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; background-color: rgb(255, 255, 255);\"><a name=\"user-content-what-are-the-difference-between-p-and-puts\" class=\"anchor\" href=\"https://gist.github.com/karimmtarek/2a60a5d6bfe005c991a1#what-are-the-difference-between-p-and-puts\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none; position: absolute; top: 0px; bottom: 0px; left: 0px; display: block; padding-right: 6px; padding-left: 30px; margin-left: -30px;\"></a>What are the difference between&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: inherit;\">p</code>&nbsp;and&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: inherit;\">puts</code>?</h5><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25px; background-color: rgb(255, 255, 255);\">The difference is subtle, but p prints the true value of an object, rather than a string-ified version of the object. This will make more sense soon, but for the sake of simplicity, we'll use the p command throughout the exercises, as we'll want to see the true values of our code returned to the output window.</p><h5 style=\"box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.4; font-size: 1em; position: relative; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; background-color: rgb(255, 255, 255);\"><a name=\"user-content-whats-the-difference-between-a-lambda-and-a-procshort-for-procedure\" class=\"anchor\" href=\"https://gist.github.com/karimmtarek/2a60a5d6bfe005c991a1#whats-the-difference-between-a-lambda-and-a-procshort-for-procedure\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none; position: absolute; top: 0px; bottom: 0px; left: 0px; display: block; padding-right: 6px; padding-left: 30px; margin-left: -30px;\"></a>What’s the difference between a&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: inherit;\">lambda</code>&nbsp;and a&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: inherit;\">proc</code>(short for&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: inherit;\">procedure</code>)?</h5><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25px; background-color: rgb(255, 255, 255);\">They are both Proc objects. However, lambdas are a different ‘flavor’ of procs.* 1. Lambdas check the number of arguments, while procs do not 2. Lambdas and procs treat the ‘return’ keyword differently -&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px;\">return</code>&nbsp;inside of a lambda triggers the code right outside of the lambda code -&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px;\">return</code>&nbsp;inside of a proc triggers the code outside of the method where the proc is being executed</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25px; background-color: rgb(255, 255, 255);\">*<em style=\"box-sizing: border-box;\"><a href=\"http://awaxman11.github.io/blog/2013/08/05/what-is-the-difference-between-a-block/\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;\">reference</a></em></p><h5 style=\"box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.4; font-size: 1em; position: relative; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; background-color: rgb(255, 255, 255);\"><a name=\"user-content-what-is-a-singleton-class\" class=\"anchor\" href=\"https://gist.github.com/karimmtarek/2a60a5d6bfe005c991a1#what-is-a-singleton-class\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none; position: absolute; top: 0px; bottom: 0px; left: 0px; display: block; padding-right: 6px; padding-left: 30px; margin-left: -30px;\"></a>What is a singleton class?</h5><h5 style=\"box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.4; font-size: 1em; position: relative; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; background-color: rgb(255, 255, 255);\"><a name=\"user-content-explain-how-ruby-looks-for-a-method-when-you-call-it-on-a-receiver\" class=\"anchor\" href=\"https://gist.github.com/karimmtarek/2a60a5d6bfe005c991a1#explain-how-ruby-looks-for-a-method-when-you-call-it-on-a-receiver\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none; position: absolute; top: 0px; bottom: 0px; left: 0px; display: block; padding-right: 6px; padding-left: 30px; margin-left: -30px;\"></a>Explain how ruby looks for a method when you call it on a receiver.</h5><h5 style=\"box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.4; font-size: 1em; position: relative; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; background-color: rgb(255, 255, 255);\"><a name=\"user-content-whats-the-difference-between-inspect-and-to_s\" class=\"anchor\" href=\"https://gist.github.com/karimmtarek/2a60a5d6bfe005c991a1#whats-the-difference-between-inspect-and-to_s\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none; position: absolute; top: 0px; bottom: 0px; left: 0px; display: block; padding-right: 6px; padding-left: 30px; margin-left: -30px;\"></a>What’s the difference between&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: inherit;\">inspect</code>&nbsp;and&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: inherit;\">to_s</code>?</h5><h5 style=\"box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.4; font-size: 1em; position: relative; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; background-color: rgb(255, 255, 255);\"><a name=\"user-content-whats-the-difference-between-include-and-extend--whats-the-difference-between-extending-a-module-and-including-it\" class=\"anchor\" href=\"https://gist.github.com/karimmtarek/2a60a5d6bfe005c991a1#whats-the-difference-between-include-and-extend--whats-the-difference-between-extending-a-module-and-including-it\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none; position: absolute; top: 0px; bottom: 0px; left: 0px; display: block; padding-right: 6px; padding-left: 30px; margin-left: -30px;\"></a>What’s the difference between&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: inherit;\">include</code>&nbsp;and&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: inherit;\">extend</code>? / What’s the difference between extending a module and including it?</h5><ol class=\"task-list\" style=\"box-sizing: border-box; padding: 0px 0px 0px 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25px; background-color: rgb(255, 255, 255);\"><li style=\"box-sizing: border-box;\"><a href=\"http://lesseverything.com/blog/archives/2012/08/02/the-difference-between-include-and-extend-in-ruby/\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;\">reference</a></li><li style=\"box-sizing: border-box;\"><a href=\"http://stackoverflow.com/questions/156362/what-is-the-difference-between-include-and-extend-in-ruby\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;\">reference</a>&nbsp;##### what does&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px;\">self</code>&nbsp;mean when used in a class&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px;\">self</code>&nbsp;is the \"current object\" and the default receiver of messages (method calls) for which no explicit receiver is specified. Which object plays the role of self depends on the context.*</li></ol><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25px; background-color: rgb(255, 255, 255);\">*<a href=\"http://ruby-doc.org/docs/keywords/1.9/Object.html#method-i-self\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;\">reference</a></p><h5 style=\"box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.4; font-size: 1em; position: relative; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; background-color: rgb(255, 255, 255);\"><a name=\"user-content-explain-what-a--b-means\" class=\"anchor\" href=\"https://gist.github.com/karimmtarek/2a60a5d6bfe005c991a1#explain-what-a--b-means\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none; position: absolute; top: 0px; bottom: 0px; left: 0px; display: block; padding-right: 6px; padding-left: 30px; margin-left: -30px;\"></a>Explain what&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: inherit;\">a ||= b</code>&nbsp;means</h5><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25px; background-color: rgb(255, 255, 255);\">A common misconception is that a ||= b is equivalent to a = a || b, but it behaves like a || a = b.</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25px; background-color: rgb(255, 255, 255);\">In a = a || b, a is set to something by the statement on every run, whereas with a || a = b, a is only set if a is logically false (i.e. if it's nil or false) because || is 'short circuiting'. That is, if the left hand side of the || comparison is true, there's no need to check the right hand side.</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25px; background-color: rgb(255, 255, 255);\">*<a href=\"http://www.rubyinside.com/what-rubys-double-pipe-or-equals-really-does-5488.html\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;\">reference</a></p><h5 style=\"box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.4; font-size: 1em; position: relative; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; background-color: rgb(255, 255, 255);\"><a name=\"user-content-understand-access-modifiers-and-how-they-are-used-within-the-ruby-language-private-public-protected\" class=\"anchor\" href=\"https://gist.github.com/karimmtarek/2a60a5d6bfe005c991a1#understand-access-modifiers-and-how-they-are-used-within-the-ruby-language-private-public-protected\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none; position: absolute; top: 0px; bottom: 0px; left: 0px; display: block; padding-right: 6px; padding-left: 30px; margin-left: -30px;\"></a>Understand access modifiers and how they are used within the ruby language (Private, public, protected)</h5><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25px; background-color: rgb(255, 255, 255);\"><code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px;\">private</code>: The method cannot be called outside class scope. The object send message to itself<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px;\">protected</code>: You can call an object's protected methods as long as the default object self is an instance of the same class as the object whose method you're calling&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px;\">public</code>: can be called from anywhere</p><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25px; background-color: rgb(255, 255, 255);\"><a href=\"http://stackoverflow.com/questions/9882754/what-are-the-differences-between-private-public-and-protected-methods\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;\">reference</a></p><h5 style=\"box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.4; font-size: 1em; position: relative; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; background-color: rgb(255, 255, 255);\"><a name=\"user-content-why-do-some-methods-end-with-a-bang--and-others-with-question-marks--what-are-they-called-and-what-do-they-do\" class=\"anchor\" href=\"https://gist.github.com/karimmtarek/2a60a5d6bfe005c991a1#why-do-some-methods-end-with-a-bang--and-others-with-question-marks--what-are-they-called-and-what-do-they-do\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none; position: absolute; top: 0px; bottom: 0px; left: 0px; display: block; padding-right: 6px; padding-left: 30px; margin-left: -30px;\"></a>Why do some methods end with a bang (!) and others with question marks (?), what are they called and what do they do?</h5><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25px; background-color: rgb(255, 255, 255);\">Bang methods are most commonly used to distinguish between a dangerous and a safe version of the same method.</p><ul class=\"task-list\" style=\"box-sizing: border-box; padding: 0px 0px 0px 2em; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25px; background-color: rgb(255, 255, 255);\"><li style=\"box-sizing: border-box;\">mutator methods - one version changes the object, the other one returns a copy and leaves the original object unchanged</li><li style=\"box-sizing: border-box;\">when encountering an error, one version throws an exception while the other one only writes an error message to the log or does nothing</li></ul><p style=\"box-sizing: border-box; margin-top: 0px; margin-bottom: 16px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25px; background-color: rgb(255, 255, 255);\">As for any method ends with&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px;\">?</code>&nbsp;it indicates that a method returns a boolean value.</p><h5 style=\"box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.4; font-size: 1em; position: relative; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; background-color: rgb(255, 255, 255);\"><a name=\"user-content-understand-basic-oop-principles\" class=\"anchor\" href=\"https://gist.github.com/karimmtarek/2a60a5d6bfe005c991a1#understand-basic-oop-principles\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none; position: absolute; top: 0px; bottom: 0px; left: 0px; display: block; padding-right: 6px; padding-left: 30px; margin-left: -30px;\"></a>Understand basic OOP principles</h5><h5 style=\"box-sizing: border-box; margin-top: 1em; margin-bottom: 16px; line-height: 1.4; font-size: 1em; position: relative; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; background-color: rgb(255, 255, 255);\"><a name=\"user-content-explain\" class=\"anchor\" href=\"https://gist.github.com/karimmtarek/2a60a5d6bfe005c991a1#explain\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none; position: absolute; top: 0px; bottom: 0px; left: 0px; display: block; padding-right: 6px; padding-left: 30px; margin-left: -30px;\"></a>Explain:</h5><ul class=\"task-list\" style=\"box-sizing: border-box; padding: 0px 0px 0px 2em; margin-top: 0px; font-family: 'Helvetica Neue', Helvetica, 'Segoe UI', Arial, freesans, sans-serif; font-size: 16px; line-height: 25px; background-color: rgb(255, 255, 255); margin-bottom: 0px !important;\"><li style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">What's the difference between classes and objects?:</strong>&nbsp;An object is a unit of data. A class is what kind of data it is. every object has a unique object identifier. instance variables: variables with values that are unique to each class instance.</li><li style=\"box-sizing: border-box;\">**Inheritance?:**is a fundamental principle of object-oriented programming. It allows a class to \"inherit\" (behavior or characteristics) of another, more general class.&nbsp;<a href=\"http://www.introprogramming.info/english-intro-csharp-book/read-online/chapter-20-object-oriented-programming-principles/\" rel=\"noreferrer\" style=\"box-sizing: border-box; color: rgb(65, 131, 196); text-decoration: none;\">reference</a></li><li style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">Abstraction?:</strong>&nbsp;Abstraction means working with something we know how to use without knowing how it works internally.</li><li style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">Encapsulation?:</strong>&nbsp;Encapsulation is one of the main concepts in OOP. It is also called \"information hiding\". An object has to provide its users only with the essential information for manipulation, without the internal details.</li><li style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">Polymorphism?:</strong>&nbsp;Polymorphism allows treating objects of a derived class as objects of its base class. For example, big cats (base class) catch their prey (a method) in different ways. A Lion (derived class) sneaks on it, while a Cheetah (another derived class) simply outruns it. *So polymorphism is the ability (in programming) to present the same interface for differing underlying forms (data types). For example, integers and floats are implicitly polymorphic since you can add, subtract, multiply and so on, irrespective of the fact that the types are different. They're rarely considered as objects in the usual term.</li><li style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">Distributed systems?</strong></li><li style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">Hash tables?</strong></li><li style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">Pointers?</strong></li><li style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">ACID?</strong></li><li style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">MVC?</strong></li><li style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">Instantiation</strong></li><li style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">Class:</strong>&nbsp;is a combination of state and methods that use the state.</li><li style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">Method</strong></li><li style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">Function</strong></li><li style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">Class variables and instance variables</strong></li><li style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">Constructor:</strong>&nbsp;a special method associated with a class. The standard constractor is called&nbsp;<code style=\"box-sizing: border-box; font-family: Consolas, 'Liberation Mono', Menlo, Courier, monospace; font-size: 14px;\">new</code>.</li><li style=\"box-sizing: border-box;\"><strong style=\"box-sizing: border-box;\">Superclass, base class</strong></li></ul></div>"
    }
  ]
}